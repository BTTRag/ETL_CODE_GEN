CREATE SCHEMA ETL_CODE_GEN;
CREATE SCHEMA HIST;

--Create BATCH TASK EXAMPLE:
CREATE TASK ORDERS_DBO_TASK_BATCH
WAREHOUSE = AE_WAREHOUSE
SCHEDULE = '60 MINUTE'
AS
Select 1
;

-- DOMINIC.ETL_CODE_GEN.PRIMARY_KEYS definition

create or replace TABLE PRIMARY_KEYS (
	TABLE_SCHEMA VARCHAR(100),
	STG_TABLE_NAME VARCHAR(100),
	PRIMARY_KEY_COLUMN VARCHAR(100),
	HIST_TABLE_NAME VARCHAR(100)
);

-- DOMINIC.ETL_CODE_GEN.VW_GEN_STG_VIEWS source

CREATE OR REPLACE VIEW VW_GEN_STG_VIEWS as
SELECT 
T.TABLE_CATALOG,
T.TABLE_SCHEMA,
T.TABLE_NAME,
CONCAT('CREATE OR REPLACE VIEW ', chr(10)
              ,T.TABLE_CATALOG,'.',T.TABLE_SCHEMA, '.VW_STG_',T.TABLE_NAME, chr(10)
              ,'AS SELECT ', chr(10)
              ,array_to_string(arrayagg(concat(column_name, chr(10))) within group ( order by ordinal_position), ',' )
              ,', TO_CHAR(SHA1( UPPER(',array_to_string(arrayagg(concat('RTRIM(IFNULL(TO_CHAR(',column_name,'),''NA''))',chr(10))) within group ( order by ordinal_position), '||''|''||' ),'||''|''))) as ETL_ROW_HASH', chr(10)
              ,' FROM '
              ,T.TABLE_CATALOG,'.',T.TABLE_SCHEMA,'.',T.TABLE_NAME
              ,';'
              ) AS STG_VIEW
FROM INFORMATION_SCHEMA.TABLES T
LEFT JOIN INFORMATION_SCHEMA.COLUMNS C on T.table_name = c.Table_name and t.table_schema = c.table_schema
WHERE T.TABLE_TYPE = 'BASE TABLE' and T.TABLE_NAME <> 'FIVETRAN_AUDIT' and t.table_schema not in ('HIST','ETL_CODE_GEN')
GROUP BY T.TABLE_CATALOG,T.TABLE_NAME,T.TABLE_SCHEMA;

-- DOMINIC.ETL_CODE_GEN.VW_GEN_HIST_TABLES source

CREATE OR REPLACE VIEW VW_GEN_HIST_TABLES as
SELECT 
T.TABLE_CATALOG,
T.TABLE_SCHEMA,
T.TABLE_NAME,
CONCAT('CREATE OR REPLACE TABLE ', chr(10)
              ,T.TABLE_CATALOG,'.','HIST','.HIST_',T.TABLE_SCHEMA,'_',T.TABLE_NAME, chr(10)
              ,'( HIST_',T.TABLE_SCHEMA,'_',T.TABLE_NAME,'_SK NUMBER(38,20) autoincrement', chr(10)
              ,',', array_to_string(arrayagg(concat(column_name,' ',
              CONCAT(CASE 
		WHEN DATA_TYPE IN ('CHAR','VARCHAR','NCHAR','NVARCHAR','TEXT') THEN 'VARCHAR'
		WHEN DATA_TYPE IN ('DECIMAL','NUMERIC','MONEY','FLOAT','NUMBER') THEN 'NUMBER'
		WHEN DATA_TYPE IN ('TINYINT','SMALLINT','INT','BIGINT') THEN 'NUMBER'
		WHEN DATA_TYPE IN ('TIMESTAMP','BINARY','VARBINARY') THEN 'VARCHAR'
		WHEN DATA_TYPE IN ('DATE','DATETIME') THEN 'DATETIME'
		WHEN DATA_TYPE IN ('BOOLEAN') THEN 'BOOLEAN'
		WHEN DATA_TYPE IN ('SMALLDATETIME', 'DATETIME', 'DATETIME2','TIMESTAMP','TIMESTAMP_TZ','TIMESTAMP_NTZ') THEN 'TIMESTAMP_TZ'
		ELSE DATA_TYPE
		END  
	 ,CASE
		WHEN DATA_TYPE IN ('CHAR','VARCHAR','NCHAR','NVARCHAR','BINARY','VARBINARY','TEXT')
		AND CHARACTER_MAXIMUM_LENGTH <= 100   THEN '(100)'
		WHEN DATA_TYPE IN ('CHAR','VARCHAR','NCHAR','NVARCHAR','BINARY','VARBINARY','TEXT')
		AND CHARACTER_MAXIMUM_LENGTH > 100 AND CHARACTER_MAXIMUM_LENGTH <= 1000  THEN '(1000)'
		WHEN DATA_TYPE IN ('CHAR','VARCHAR','NCHAR','NVARCHAR','BINARY','VARBINARY','TEXT')
		AND CHARACTER_MAXIMUM_LENGTH > 1000 AND CHARACTER_MAXIMUM_LENGTH <= 4000  THEN '(4000)'
		WHEN DATA_TYPE IN ('CHAR','VARCHAR','NCHAR','NVARCHAR','BINARY','VARBINARY','TEXT')
		AND CHARACTER_MAXIMUM_LENGTH > 4000  THEN '()'
		WHEN DATA_TYPE IN ('DECIMAL','NUMERIC','MONEY','FLOAT','NUMBER','TINYINT','SMALLINT','INT','BIGINT') THEN '(38,20)'
		--WHEN DATA_TYPE IN ('TEXT','NTEXT','TINYINT','SMALLINT','INT','BIGINT','DATETIME','DATETIME2','FLOAT','DATE','BIT','UNIQUEIDENTIFIER',) THEN '()'
		WHEN DATA_TYPE IN ('SMALLDATETIME', 'DATETIME', 'DATETIME2','TIMESTAMP','TIMESTAMP_TZ','TIMESTAMP_NTZ') THEN '(9)'
        WHEN DATA_TYPE IN ('DATE') THEN ''
		WHEN DATA_TYPE IN ('VARIANT','BOOLEAN') THEN ''
		WHEN CHARACTER_MAXIMUM_LENGTH = -1 OR CHARACTER_MAXIMUM_LENGTH IS NULL THEN '()'
		END )                                      
         ,chr(10))) within group ( order by ordinal_position), ',' )
        ,',ETL_ROW_SOURCE VARCHAR(1000)', chr(10)
		,',ETL_EXEC_DT TIMESTAMP_TZ', chr(10)
		,',ETL_CHANGE_TYPE VARCHAR (1000)', chr(10)
		,',ETL_ROW_HASH VARCHAR(40)', chr(10)
        ,',ETL_EXPIRY_DT TIMESTAMP_TZ', chr(10)
        ,',ETL_IS_CURRENT VARCHAR(1)', chr(10)
        ,');'
   ) AS DDL
FROM INFORMATION_SCHEMA.TABLES T
LEFT JOIN INFORMATION_SCHEMA.COLUMNS C on T.table_name = c.Table_name and t.table_schema = c.table_schema
WHERE T.TABLE_TYPE = 'BASE TABLE' and T.TABLE_NAME <> 'FIVETRAN_AUDIT' and T.TABLE_SCHEMA NOT IN ('HIST','ETL_CODE_GEN')
GROUP BY T.TABLE_CATALOG,T.TABLE_NAME,T.TABLE_SCHEMA;

-- DOMINIC.ETL_CODE_GEN.VW_GEN_HIST_VIEWS source

CREATE OR REPLACE VIEW VW_GEN_HIST_VIEWS as
SELECT 
T.TABLE_CATALOG,
T.TABLE_SCHEMA,
T.TABLE_NAME,
CONCAT('CREATE OR REPLACE VIEW ', chr(10)
              ,T.TABLE_CATALOG,'.',T.TABLE_SCHEMA, '.VW_',T.TABLE_NAME, chr(10)
              ,'AS SELECT ', chr(10)
              ,array_to_string(arrayagg(concat(column_name, chr(10))) within group ( order by ordinal_position), ',' )
              ,' FROM '
              ,T.TABLE_CATALOG,'.',T.TABLE_SCHEMA,'.',T.TABLE_NAME, chr(10)
              ,' WHERE ETL_IS_CURRENT =''Y'''
              ,';'
              ) AS DDL
FROM INFORMATION_SCHEMA.TABLES T
LEFT JOIN INFORMATION_SCHEMA.COLUMNS C on T.table_name = c.Table_name and t.table_schema = c.table_schema
WHERE T.TABLE_TYPE = 'BASE TABLE' and T.TABLE_NAME <> 'FIVETRAN_AUDIT' and t.table_schema in ('HIST')
GROUP BY T.TABLE_CATALOG,T.TABLE_NAME,T.TABLE_SCHEMA;

-- DOMINIC.ETL_CODE_GEN.VW_GEN_HIST_INSERTS source

CREATE OR REPLACE VIEW VW_GEN_HIST_INSERTS as
SELECT 
T.TABLE_CATALOG,
T.TABLE_SCHEMA,
T.TABLE_NAME,
CONCAT( 'CREATE OR REPLACE TASK ','HIST.HIST_',T.TABLE_SCHEMA,'_',T.TABLE_NAME,'_INSERT ', chr(10)
        ,'WAREHOUSE = ''AE_WAREHOUSE''',chr(10)
       ,'AFTER HIST.',T.TABLE_SCHEMA,'_TASK_BATCH ',chr(10)
       ,'AS ',chr(10)
        ,'INSERT INTO HIST.HIST_',T.TABLE_SCHEMA,'_', T.TABLE_NAME, chr(10)
       ,'(',chr(10)
       ,array_to_string(arrayagg(concat(column_name, chr(10))) within group ( order by ordinal_position), ',' )
       ,',ETL_ROW_SOURCE',chr(10)
       ,',ETL_EXEC_DT',chr(10)
       ,',ETL_CHANGE_TYPE',chr(10)
       ,',ETL_ROW_HASH',chr(10)
       ,',ETL_EXPIRY_DT',chr(10)
       ,',ETL_IS_CURRENT',chr(10)
       ,') SELECT '
       ,array_to_string(arrayagg(concat('STG.',column_name, chr(10))) within group ( order by ordinal_position), ',' )
       ,',STG.ETL_ROW_SOURCE',chr(10)
       ,',STG.ETL_EXEC_DT',chr(10)
       ,',CASE WHEN HIST.ETL_ROW_HASH is null THEN ''INSERT'' WHEN STG._FIVETRAN_DELETED =''TRUE'' then ''DELETE'' ELSE ''UPDATE'' END as ETL_CHANGE_TYPE',chr(10)
       ,',STG.ETL_ROW_HASH',chr(10)
       ,',NULL as ETL_EXPIRY_DT',chr(10)
       ,',CASE WHEN HIST.HIST_',T.TABLE_SCHEMA,'_',T.TABLE_NAME,'_SK IS NULL THEN ''Y'' ELSE ''P'' END AS ETL_IS_CURRENT',chr(10)
       ,'FROM (', char(10)
       ,'SELECT '
              ,array_to_string(arrayagg(concat('STG.',column_name, chr(10))) within group ( order by ordinal_position), ',' )
       ,',''',T.TABLE_SCHEMA,''' AS ETL_ROW_SOURCE',chr(10)
       ,',CURRENT_TIMESTAMP AS ETL_EXEC_DT',chr(10)
       ,',''INSERT'' as ETL_CHANGE_TYPE',chr(10)
       ,',STG.ETL_ROW_HASH',chr(10)
       ,'FROM ',T.TABLE_SCHEMA,'.VW_STG_',T.TABLE_NAME,' STG', chr(10)
       ,') AS STG', chr(10)
       ,'LEFT OUTER JOIN HIST.VW_HIST_',T.TABLE_SCHEMA,'_',T.TABLE_NAME, ' HIST', chr(10)
       , 'ON STG.', PRIMARY_KEY_COLUMN,' = HIST.', PRIMARY_KEY_COLUMN, ' AND HIST.ETL_IS_CURRENT = ''Y''', chr(10)
       , 'WHERE HIST.HIST_',T.TABLE_SCHEMA,'_',T.TABLE_NAME,'_SK IS NULL OR STG.ETL_ROW_HASH != HIST.ETL_ROW_HASH'
              ,';'
              ) AS DDL
FROM INFORMATION_SCHEMA.TABLES T
LEFT JOIN INFORMATION_SCHEMA.COLUMNS C on T.table_name = c.Table_name and t.table_schema = c.table_schema
LEFT JOIN ETL_CODE_GEN.PRIMARY_KEYS P ON T.table_schema = P.TABLE_SCHEMA and T.TABLE_NAME = P.STG_TABLE_NAME
WHERE T.TABLE_TYPE = 'BASE TABLE' and T.TABLE_NAME <> 'FIVETRAN_AUDIT' and T.TABLE_SCHEMA NOT IN ('HIST','ETL_CODE_GEN')
GROUP BY T.TABLE_CATALOG,T.TABLE_NAME,T.TABLE_SCHEMA, P.PRIMARY_KEY_COLUMN;

-- DOMINIC.ETL_CODE_GEN.VW_GEN_HIST_MERGE source

CREATE OR REPLACE VIEW VW_GEN_HIST_MERGE as
SELECT 
T.TABLE_CATALOG,
T.TABLE_SCHEMA,
T.TABLE_NAME,
CONCAT('CREATE OR REPLACE TASK ',T.TABLE_SCHEMA,'.',T.TABLE_NAME,'_MERGE ', chr(10)
        ,'WAREHOUSE = ''AE_WAREHOUSE''',chr(10)
       ,'AFTER ',T.TABLE_SCHEMA,'.',T.TABLE_NAME,'_INSERT ',chr(10)
       ,'AS ',chr(10)
       ,'MERGE INTO HIST.', T.TABLE_NAME,' TRG', chr(10)
       ,'USING (',chr(10)
       ,'SELECT ',chr(10)
       ,'A.',P.PRIMARY_KEY_COLUMN,' as NEW_REC_',P.PRIMARY_KEY_COLUMN,chr(10)
       ,',B.', P.PRIMARY_KEY_COLUMN,' as OLD_REC_',P.PRIMARY_KEY_COLUMN,chr(10)
       ,',A.ETL_EXEC_DT AS NEW_REC_ETL_EXEC_DT',chr(10)
       ,',B.ETL_IS_CURRENT AS OLD_REC_ETL_IS_CURRENT',chr(10)
       ,'FROM HIST.',T.TABLE_NAME, ' A', chr(10)
       ,'LEFT OUTER JOIN HIST.',T.TABLE_NAME, ' B', chr(10)
       ,'ON (A.',P.PRIMARY_KEY_COLUMN,' = B.', P.PRIMARY_KEY_COLUMN,' AND B.ETL_IS_CURRENT = ''Y'')',chr(10)
       ,'WHERE A.ETL_IS_CURRENT =''P'') SRC', chr(10)
       ,'ON (SRC.NEW_REC_', P.PRIMARY_KEY_COLUMN,' = TRG.',P.PRIMARY_KEY_COLUMN,')'
       ,'WHEN MATCHED AND (TRG.ETL_IS_CURRENT = ''P'') THEN', chr(10)
       ,'UPDATE ', chr(10)
       ,'SET TRG.ETL_IS_CURRENT = ''Y'',',chr(10)
       ,'TRG.ETL_EXEC_DT = CURRENT_TIMESTAMP',chr(10)
       ,'WHEN MATCHED AND (SRC.OLD_REC_',P.PRIMARY_KEY_COLUMN,' IS NOT NULL AND SRC.OLD_REC_ETL_IS_CURRENT = ''Y'') THEN',chr(10)
       ,'UPDATE', chr(10)
       ,'SET TRG.ETL_IS_CURRENT = ''N'',',chr(10)
       ,'TRG.ETL_EXPIRY_DT = DATEADD(SECOND,-1,SRC.NEW_REC_ETL_EXEC_DT),',chr(10)
       ,'TRG.ETL_EXEC_DT = CURRENT_TIMESTAMP,',chr(10)
       ,'TRG.ETL_CHANGE_TYPE = ''UPDATE'''
              ,';'
              ) AS DDL
FROM INFORMATION_SCHEMA.TABLES T
LEFT JOIN INFORMATION_SCHEMA.COLUMNS C on T.table_name = c.Table_name and t.table_schema = c.table_schema
LEFT JOIN ETL_CODE_GEN.PRIMARY_KEYS P ON T.table_schema = 'HIST' and T.TABLE_NAME = P.HIST_TABLE_NAME
WHERE T.TABLE_TYPE = 'BASE TABLE' and T.TABLE_NAME <> 'FIVETRAN_AUDIT' and T.TABLE_SCHEMA IN ('HIST')
GROUP BY T.TABLE_CATALOG,T.TABLE_NAME,T.TABLE_SCHEMA, P.PRIMARY_KEY_COLUMN;


